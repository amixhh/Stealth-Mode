"use client";

import { useState, useRef } from "react";
import { Upload, FileText, Send, ArrowLeft, MessageSquare, Download } from "lucide-react";
import { Button } from "../ui/button";
import jsPDF from "jspdf";

interface SummaryResult {
  id: string;
  originalText: string;
  summary: string;
  timestamp: Date;
}

const DocumentSummarization = ({ onBack }: { onBack: () => void }) => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [summaryResults, setSummaryResults] = useState<SummaryResult[]>([]);
  const [currentSummary, setCurrentSummary] = useState<string>("");
  const fileInputRef = useRef<HTMLInputElement>(null);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
    }
  };

  const handleUpload = () => {
    if (!selectedFile) return;

    setIsUploading(true);
    
    // Simulate file processing and summarization
    setTimeout(() => {
      const mockSummary = `This is a comprehensive summary of "${selectedFile.name}". The document contains important legal information that has been analyzed and condensed for your convenience. Key points include relevant legal precedents, important clauses, and actionable recommendations.`;
      
      const newSummary: SummaryResult = {
        id: Date.now().toString(),
        originalText: `${selectedFile.name}`,
        summary: mockSummary,
        timestamp: new Date(),
      };

      setSummaryResults(prev => [newSummary, ...prev]);
      setCurrentSummary(mockSummary);
      setIsUploading(false);
      setSelectedFile(null);
      
      // Reset file input
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }, 2000);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file) {
      setSelectedFile(file);
    }
  };

  const downloadSummaryAsPDF = (summary: SummaryResult) => {
    // Create a new PDF document
    const doc = new jsPDF();
    
    // Set font and size
    doc.setFont("helvetica");
    doc.setFontSize(16);
    
    // Add title
    doc.setFontSize(20);
    doc.setFont("helvetica", "bold");
    doc.text("LEGAL DOCUMENT SUMMARIZATION REPORT", 105, 20, { align: "center" });
    
    // Add separator line
    doc.setLineWidth(0.5);
    doc.line(20, 30, 190, 30);
    
    // Document info
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text("Original Document:", 20, 45);
    doc.setFont("helvetica", "bold");
    doc.text(summary.originalText, 20, 52);
    
    doc.setFont("helvetica", "normal");
    doc.text("Generated on:", 20, 65);
    doc.text(summary.timestamp.toLocaleString(), 20, 72);
    
    // Add another separator
    doc.line(20, 80, 190, 80);
    
    // Summary section
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("SUMMARY", 105, 90, { align: "center" });
    
    // Add separator
    doc.line(20, 95, 190, 95);
    
    // Summary content
    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");
    
    // Split summary into lines that fit the page width
    const maxWidth = 170; // Page width minus margins
    const lines = doc.splitTextToSize(summary.summary, maxWidth);
    
    let yPosition = 105;
    const lineHeight = 6;
    
    // Add summary text with proper line breaks
    for (let i = 0; i < lines.length; i++) {
      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(lines[i], 20, yPosition);
      yPosition += lineHeight;
    }
    
    // Add footer
    doc.setLineWidth(0.5);
    doc.line(20, 280, 190, 280);
    doc.setFontSize(10);
    doc.text("Generated by Legally AI", 105, 285, { align: "center" });
    
    // Generate filename
    const filename = `summary_${summary.originalText.replace('Document: ', '').replace(/\.[^/.]+$/, '')}_${new Date().toISOString().split('T')[0]}.pdf`;
    
    // Save the PDF
    doc.save(filename);
  };

  return (
    <div className="flex-1 flex flex-col h-full bg-chat-background">
      {/* Header */}
      <div className="border-b border-border p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <Button
              variant="ghost"
              onClick={onBack}
              className="mr-3 p-2 hover:bg-[#EFEAE4]"
            >
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <h1 className="text-xl font-semibold text-foreground">Document Summarization</h1>
          </div>
          <Button
            variant="outline"
            onClick={onBack}
            className="border-border hover:bg-[#EFEAE4]"
          >
            <MessageSquare className="h-4 w-4 mr-2" />
            Back to Chat
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col p-6">
        {/* Upload Area */}
        <div className="max-w-2xl mx-auto w-full mb-8">
          <div
            className={`border-2 border-dashed border-border rounded-lg p-8 text-center transition-colors ${
              selectedFile ? "border-foreground bg-[#EFEAE4]" : "hover:border-foreground"
            }`}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
          >
            <input
              ref={fileInputRef}
              type="file"
              accept=".pdf,.doc,.docx,.txt"
              onChange={handleFileSelect}
              className="hidden"
            />
            
            <div className="space-y-4">
              <div className="flex justify-center">
                <div className="p-3 bg-[#EFEAE4] rounded-full">
                  <Upload className="h-8 w-8 text-foreground" />
                </div>
              </div>
              
              {selectedFile ? (
                <div>
                  <p className="text-lg font-medium text-foreground mb-2">
                    Selected: {selectedFile.name}
                  </p>
                  <p className="text-sm text-muted-foreground mb-4">
                    Size: {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                  <Button
                    onClick={handleUpload}
                    disabled={isUploading}
                    className="bg-foreground text-background hover:bg-foreground/90"
                  >
                    {isUploading ? (
                      <div className="flex items-center">
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-background mr-2"></div>
                        Processing...
                      </div>
                    ) : (
                      <>
                        <Send className="h-4 w-4 mr-2" />
                        Generate Summary
                      </>
                    )}
                  </Button>
                </div>
              ) : (
                <div>
                  <h3 className="text-lg font-medium text-foreground mb-2">
                    Upload your document
                  </h3>
                  <p className="text-muted-foreground mb-4">
                    Drag and drop your file here, or click to browse
                  </p>
                  <Button
                    onClick={() => fileInputRef.current?.click()}
                    variant="outline"
                    className="border-border hover:bg-[#EFEAE4]"
                  >
                    Choose File
                  </Button>
                </div>
              )}
            </div>
          </div>
        </div>

                 {/* Results Area */}
         {summaryResults.length > 0 && (
           <div className="max-w-4xl mx-auto w-full">
             <div className="flex items-center justify-between mb-4">
               <h2 className="text-lg font-semibold text-foreground">Summarization Results</h2>
                               <Button
                  variant="outline"
                  onClick={() => {
                    summaryResults.forEach(result => downloadSummaryAsPDF(result));
                  }}
                  className="border-border hover:bg-[#EFEAE4]"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download All PDFs
                </Button>
             </div>
            <div className="space-y-4">
              {summaryResults.map((result) => (
                                 <div
                   key={result.id}
                   className="bg-white border border-border rounded-lg p-6 shadow-sm"
                 >
                   <div className="flex items-center justify-between mb-3">
                     <div className="flex items-center">
                       <FileText className="h-5 w-5 text-foreground mr-2" />
                       <h3 className="font-medium text-foreground">{result.originalText}</h3>
                     </div>
                     <div className="flex items-center space-x-2">
                       <span className="text-xs text-muted-foreground">
                         {result.timestamp.toLocaleString()}
                       </span>
                                               <Button
                          variant="outline"
                          size="sm"
                          onClick={() => downloadSummaryAsPDF(result)}
                          className="border-border hover:bg-[#EFEAE4]"
                        >
                          <Download className="h-4 w-4 mr-1" />
                          Download PDF
                        </Button>
                     </div>
                   </div>
                   <div className="bg-[#FAF7F4] rounded-lg p-4">
                     <p className="text-foreground leading-relaxed">{result.summary}</p>
                   </div>
                 </div>
              ))}
            </div>
          </div>
        )}

        {/* Empty State */}
        {summaryResults.length === 0 && !selectedFile && (
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center max-w-md mx-auto">
              <div className="p-4 bg-[#EFEAE4] rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <FileText className="h-8 w-8 text-foreground" />
              </div>
              <h2 className="text-xl font-semibold mb-2 text-foreground">
                Legal Document Summarization
              </h2>
              <p className="text-muted-foreground">
                Get Instant Summary of your legal documents. We support PDF, DOC, DOCX, and TXT files.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DocumentSummarization;
